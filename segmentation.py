# -*- coding: utf-8 -*-
"""segmentation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_j9CD4xUkOLtFoQZLpaHYlK3P0kzHk77
"""

!rm -rf images assets
!pip install numpy==1.17.0
!pip install tensorflow==1.15.2
!pip install keras==2.1.0

from google.colab import drive
drive.mount('/content/drive')

!git clone https://github.com/matterport/Mask_RCNN.git

!git clone https://github.com/stressGC/Food-Boundary-Box-Detection-Dataset.git

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/Mask_RCNN

!python3 setup.py install

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.x

"""# Mask R-CNN - Train on Shapes Dataset


This notebook shows how to train Mask R-CNN on your own dataset. To keep things simple we use a synthetic dataset of shapes (squares, triangles, and circles) which enables fast training. You'd still need a GPU, though, because the network backbone is a Resnet101, which would be too slow to train on a CPU. On a GPU, you can start to get okay-ish results in a few minutes, and good results in less than an hour.

The code of the *Shapes* dataset is included below. It generates images on the fly, so it doesn't require downloading any data. And it can generate images of any size, so we pick a small image size to train faster.
"""

# Commented out IPython magic to ensure Python compatibility.
import os
import sys
import random
import math
import re
import time
import numpy as np
import cv2
import matplotlib
import matplotlib.pyplot as plt
import tensorflow as tf
# Root directory of the project
ROOT_DIR = os.path.abspath("../../")

# Import Mask RCNN
sys.path.append(ROOT_DIR)  # To find local version of the library
from mrcnn.config import Config
from mrcnn import utils
from mrcnn import visualize
from mrcnn.model import log

# %matplotlib inline 

from mrcnn import model as modellib
import mrcnn
from mrcnn.utils import Dataset
from mrcnn.model import MaskRCNN
from numpy import zeros
from numpy import asarray
import colorsys
import argparse
import imutils
from matplotlib.patches import Rectangle
from keras.models import load_model
# %matplotlib inline
from os import listdir
from xml.etree import ElementTree

# Directory to save logs and trained model
MODEL_DIR = os.path.join(ROOT_DIR, "logs")

# Local path to trained weights file
Food_MODEL_PATH = os.path.join('/content/drive/My Drive/Model/trainedmodel_101class.hdf5')

MODEL_DIR = os.path.join(ROOT_DIR, "logs")

# Local path to trained weights file
COCO_MODEL_PATH = os.path.join(ROOT_DIR, "mask_rcnn_coco.h5")
# Download COCO trained weights from Releases if needed
if not os.path.exists(COCO_MODEL_PATH):
    utils.download_trained_weights(COCO_MODEL_PATH)

def get_data_extract(name, link, folder, formatt):
  if folder in os.listdir():
    print("Dataset already exists")
  else:
    tf.keras.utils.get_file(
    name,
    link,
    cache_subdir='/content',
    extract=True,
    archive_format=formatt,
    cache_dir=None
    )
    print("Dataset downloaded and extracted!")

# Download data and extract it to folder
get_data_extract('food-101.tar.gz', 'http://data.vision.ee.ethz.ch/cvl/food-101.tar.gz', "food-101", 'tar')

!unzip '/content/drive/My Drive/Model/food-101_annotations.zip' -d '/content/'

"""## Configurations"""

class FoodConfig(Config):
    """Configuration for training on the toy shapes dataset.
    Derives from the base Config class and overrides values specific
    to the toy shapes dataset.
    """
    # Give the configuration a recognizable name
    NAME = "Foods"

    # set the number of GPUs to use along with the number of images
    # per GPU
    GPU_COUNT = 1
    IMAGES_PER_GPU = 1
 
    # number of classes (we would normally add +1 for the background)
     # kangaroo + BG
    NUM_CLASSES = 1 + 31
    
    LEARNING_RATE = 0.001
    # setting Max ground truth instances
    #MAX_GT_INSTANCES = 10
    
config = FoodConfig()
config.display()

"""## Notebook Preferences"""

def get_ax(rows=1, cols=1, size=8):
    """Return a Matplotlib Axes array to be used in
    all visualizations in the notebook. Provide a
    central point to control graph sizes.
    
    Change the default size attribute to control the size
    of rendered images
    """
    _, ax = plt.subplots(rows, cols, figsize=(size*cols, size*rows))
    return ax

"""## Dataset

Create a synthetic dataset

Extend the Dataset class and add a method to load the shapes dataset, `load_shapes()`, and override the following methods:

* load_image()
* load_mask()
* image_reference()
"""

classes = ["apple_pie", "baklava", "beef_tartare", "beet_salad", "bibimbap", "bread_pudding"
        , "breakfast_burrito", "cannoli", "cheesecake", "chicken_wings", "chocolate_cake"
        , "cup_cakes", "deviled_eggs", "donuts", "dumplings", "falafel", "french_fries"
        , "fried_rice", "garlic_bread", "hamburger", "hot_dog", "ice_cream", "peking_duck"
        , "pho", "pizza", "ramen", "samosa", "steak", "sushi", "tiramisu", "waffles"]

class FoodDataset(utils.Dataset):
    

    def load_Foods(self, dataset_dir, is_train=True):
        
        # Add classes
        for i in range(len(classes)):
          self.add_class("Foods", i + 1, classes[i])

        annotations = '/content/food-101_annotations/'
        for i in range(len(classes)):
          images_dir = dataset_dir + classes[i] + '/'
          annotations_dir = annotations + classes[i] + '/'
          count = 0
          for filename in listdir(annotations_dir):
              # extract image id
              image_id = filename[0 : -4]
              print(image_id)
              #f = False
              #if image_id == '':
              #  continue
              #for k in range(len(image_id)):
              #  if image_id[k] < '0' or image_id[k] > '9':
              #    f = True
              #    break
              #if f:
              #  continue
              
              # skip bad images
              #if image_id in ['00090']:
              #    continue
              # skip all images after 150 if we are building the train set
              count += 1
              if is_train and count > 75:
                  continue
              # skip all images before 150 if we are building the test/val set
              if not is_train and count <= 75:
                  continue
              
              # setting image file
              img_path = images_dir + image_id + '.jpg'
              
              # setting annotations file
              ann_path = annotations_dir + filename
              
              # adding images and annotations to dataset
              self.add_image('Foods', image_id=image_id, path=img_path, annotation=ann_path)

    # extract bounding boxes from an annotation file

    def extract_boxes(self, filename):
        
        # load and parse the file
        tree = ElementTree.parse(filename)
        # get the root of the document
        root = tree.getroot()
        # extract each bounding box
        boxes = list()
        for box in root.findall('.//bndbox'):
            xmin = int(box.find('xmin').text)
            ymin = int(box.find('ymin').text)
            xmax = int(box.find('xmax').text)
            ymax = int(box.find('ymax').text)
            coors = [xmin, ymin, xmax, ymax]
            boxes.append(coors)
        
        names = list()
        for ob in root.findall('.//object'):
          names.append(ob.find('name').text)
        # extract image dimensions
        width = int(root.find('.//size/width').text)
        height = int(root.find('.//size/height').text)
        return boxes, width, height, names

# load the masks for an image
    """Generate instance masks for an image.
       Returns:
        masks: A bool array of shape [height, width, instance count] with
            one mask per instance.
        class_ids: a 1D array of class IDs of the instance masks.
     """
    def load_mask(self, image_id):
        # get details of image
        info = self.image_info[image_id]
        
        # define anntation  file location
        path = info['annotation']
        # load XML
        boxes, w, h, names = self.extract_boxes(path)

        # create one array for all masks, each on a different channel
        masks = zeros([h, w, len(boxes)], dtype='uint8')
        
        # create masks
        class_ids = list()
        for i in range(len(boxes)):
            box = boxes[i]
            row_s, row_e = box[1], box[3]
            col_s, col_e = box[0], box[2]
            masks[row_s:row_e, col_s:col_e, i] = 1
            if names[i] == "chocolate cake":
              names[i] = "chocolate_cake"
            if names[i] == "ice cream":
              names[i] = "ice_cream"
            if names[i] not in self.class_names:
              names[i] = "BG"
            class_ids.append(self.class_names.index(names[i]))
        return masks, asarray(class_ids, dtype='int32')
# load an image reference """Return the path of the image."""
    def image_reference(self, image_id):
        info = self.image_info[image_id]
        print(info)
        return info['path']

# prepare train set
train_set = FoodDataset()
train_set.load_Foods('/content/food-101/images/', is_train=True)
train_set.prepare()
print('Train: %d' % len(train_set.image_ids))
# prepare test/val set
test_set = FoodDataset()
test_set.load_Foods('/content/food-101/images/', is_train=False)
test_set.prepare()
print('Test: %d' % len(test_set.image_ids))

# Load and display random samples
image_ids = np.random.choice(train_set.image_ids, 4)
for image_id in image_ids:
    image = train_set.load_image(image_id)
    mask, class_ids = train_set.load_mask(image_id)
    visualize.display_top_masks(image, mask, class_ids, train_set.class_names)

"""## Create Model"""

# Create model in training mode
MODEL_DIR = '/content/drive/My Drive/Model/Segmentation/'
model = modellib.MaskRCNN(mode="training", config=config,
                          model_dir=MODEL_DIR)

# Which weights to start with?
#from keras.utils.data_utils import get_file
#weights_path = get_file(Food_MODEL_PATH,
#                        TF_WEIGHTS_PATH_NO_TOP,
#                        cache_subdir='content',
#                        md5_hash='a268eb855778b3df3c7506639542a6af')

init_with = "imagenet"  # imagenet, coco, or last

if init_with == "Food":
   model.load_weights(Food_MODEL_PATH, by_name=True)
elif init_with == "imagenet":
    model.load_weights(model.get_imagenet_weights(), by_name=True)
elif init_with == "coco":
    # Load weights trained on MS COCO, but skip layers that
    # are different due to the different number of classes
    # See README for instructions to download the COCO weights
    model.load_weights(COCO_MODEL_PATH, by_name=True,
                       exclude=["mrcnn_class_logits", "mrcnn_bbox_fc", 
                                "mrcnn_bbox", "mrcnn_mask"])
elif init_with == "last":
    # Load the last model you trained and continue training
    model.load_weights(model.find_last(), by_name=True)

model.load_weights('/content/drive/My Drive/Model/Segmentation/foods20200810T1453/mask_rcnn_foods_0011.h5', by_name=True)

"""## Training

Train in two stages:
1. Only the heads. Here we're freezing all the backbone layers and training only the randomly initialized layers (i.e. the ones that we didn't use pre-trained weights from MS COCO). To train only the head layers, pass `layers='heads'` to the `train()` function.

2. Fine-tune all layers. For this simple example it's not necessary, but we're including it to show the process. Simply pass `layers="all` to train all layers.
"""

# Train the head branches
# Passing layers="heads" freezes all layers except the head
# layers. You can also pass a regular expression to select
# which layers to train by name pattern.
model.train(train_set, test_set, 
            learning_rate=config.LEARNING_RATE, 
            epochs=2, 
            layers='heads')

# Fine tune all layers
# Passing layers="all" trains all layers. You can also 
# pass a regular expression to select which layers to
# train by name pattern.
model.train(train_set, test_set, 
            learning_rate=config.LEARNING_RATE,
            epochs=100, 
            layers="all")

# Fine tune all layers
# Passing layers="all" trains all layers. You can also 
# pass a regular expression to select which layers to
# train by name pattern.
model.train(train_set, test_set, 
            learning_rate=config.LEARNING_RATE / 100,
            epochs=50, 
            layers="all")

# Fine tune all layers
# Passing layers="all" trains all layers. You can also 
# pass a regular expression to select which layers to
# train by name pattern.
model.load_weights('/content/drive/My Drive/Model/Segmentation/foods20200808T1558/mask_rcnn_foods_0008.h5', by_name=True)
model.train(train_set, test_set, 
            learning_rate=config.LEARNING_RATE / 100,
            epochs=5, 
            layers="all")

# Save weights
# Typically not needed because callbacks save after every epoch
# Uncomment to save manually
# model_path = os.path.join(MODEL_DIR, "mask_rcnn_shapes.h5")
# model.keras_model.save_weights(model_path)

"""## Detection"""

class InferenceConfig(FoodConfig):
    GPU_COUNT = 1
    IMAGES_PER_GPU = 1

inference_config = InferenceConfig()

# Recreate the model in inference mode
model2 = modellib.MaskRCNN(mode="inference", 
                          config=inference_config,
                          model_dir=MODEL_DIR)

# Get path to saved weights
# Either set a specific path or find last trained weights
# model_path = os.path.join(ROOT_DIR, ".h5 file name here")
model_path = '/content/drive/My Drive/Model/Segmentation/foods20200810T1453/mask_rcnn_foods_0011.h5'

# Load trained weights
print("Loading weights from ", model_path)
model2.load_weights(model_path, by_name=True)

# Test on a random image
image_id = random.choice(test_set.image_ids)
original_image, image_meta, gt_class_id, gt_bbox, gt_mask =\
    modellib.load_image_gt(test_set, inference_config, 
                           image_id, use_mini_mask=False)

log("original_image", original_image)
log("image_meta", image_meta)
log("gt_class_id", gt_class_id)
log("gt_bbox", gt_bbox)
log("gt_mask", gt_mask)

visualize.display_instances(original_image, gt_bbox, gt_mask, gt_class_id, 
                            train_set.class_names, figsize=(8, 8))

#original_image = plt.imread('/content/baklava.jpeg')
results = model2.detect([original_image], verbose=1)

r = results[0]
visualize.display_instances(original_image, r['rois'], r['masks'], r['class_ids'], 
                            train_set.class_names, r['scores'], ax=get_ax())

"""## Evaluation"""

# Compute VOC-Style mAP @ IoU=0.5
# Running on 10 images. Increase for better accuracy.
image_ids = np.random.choice(test_set.image_ids, 10)
APs = []
for image_id in image_ids:
    # Load image and ground truth data
    image, image_meta, gt_class_id, gt_bbox, gt_mask =\
        modellib.load_image_gt(test_set, inference_config,
                               image_id, use_mini_mask=False)
    molded_images = np.expand_dims(modellib.mold_image(image, inference_config), 0)
    # Run object detection
    results = model.detect([image], verbose=0)
    r = results[0]
    # Compute AP
    AP, precisions, recalls, overlaps =\
        utils.compute_ap(gt_bbox, gt_class_id, gt_mask,
                         r["rois"], r["class_ids"], r["scores"], r['masks'])
    APs.append(AP)
    
print("mAP: ", np.mean(APs))

